{"version":3,"sources":["app.ts","environment.ts","main.ts","shell.ts","models/index.ts","models/priority.ts","models/todo.ts","resources/index.ts","services/todo-service.ts","utils/mapper.ts","resources/elements/todo-item.ts","C:/dev/bitbucket/arm-chair/samples/todo/Todo.WebClient/src/utils/automapper/automapper.js","utils/jsmapper/automapper.ts"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { TodoService } from './services/todo-service';\nimport { autoinject } from 'aurelia-framework';\n\n@autoinject()\nexport class App {\n\n    private _todoService: TodoService;\n    todoItems: any[];\n\n    constructor(todoService: TodoService) {\n        this._todoService = todoService;\n        this.todoItems = this._todoService.todo; //get a reference.\n    }\n\n    created() {\n        this._todoService.getTodoItems();\n    }\n}\n","export default {\n  debug: true,\n  testing: true,\n  apiUrl: 'http://localhost:5000/api/v1'\n};\n","import { Aurelia } from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot(\"shell\"));\n}\n","import { PipelineStep, RouterConfiguration, Router } from 'aurelia-router';\r\nimport { autoinject } from 'aurelia-framework';\r\n\r\nimport * as LogManager from 'aurelia-logging'\r\nvar log = LogManager.getLogger('shell');\r\n\r\n@autoinject()\r\nexport class Shell {\r\n\r\n    private _router: Router;\r\n\r\n    configureRouter(config: RouterConfiguration, router: Router): void {\r\n        this._router = router;\r\n        config.title = 'ArmChair - Todo';\r\n\r\n        config.map([\r\n            { route: ['', 'active', 'all'], name: 'app', moduleId: 'app' }\r\n        ]);\r\n    }\r\n\r\n}","export * from './priority';\r\nexport * from './todo';","export enum Priority {\r\n    High = 3,\r\n    Medium = 2,\r\n    Low = 1\r\n}","import { Priority } from './priority';\r\n\r\nexport class Todo {\r\n\r\n    description: string;\r\n    isComplete?: boolean;\r\n    created?: Date;\r\n    priority: Priority = Priority.Medium;\r\n\r\n    static type = \"todo\";\r\n\r\n }\r\n\r\n","import {FrameworkConfiguration} from 'aurelia-framework';\nimport { TodoItem } from './elements/todo-item';\n\nexport function configure(config: FrameworkConfiguration) {\n  config.globalResources('./elements/todo-item');\n}\n\nexport {\n  TodoItem\n}","import { HttpClient, json } from 'aurelia-fetch-client';\r\nimport { Todo } from '../models/todo';\r\nimport { Priority } from '../models/priority';\r\nimport { singleton, autoinject } from 'aurelia-framework';\r\nimport environment  from '../environment';\r\nimport { Mapper } from '../utils/mapper';\r\nimport { LogManager  } from \"aurelia-framework\";\r\nimport { Logger  } from \"aurelia-logging\";\r\n\r\n\r\nvar log = <Logger>LogManager.getLogger('todo-service');\r\n \r\n@autoinject()\r\n@singleton()\r\nexport class TodoService {\r\n\r\n    todo : Todo[] = [];\r\n    private _http: HttpClient;\r\n    private _mapper: Mapper;\r\n\r\n    constructor(http: HttpClient, mapper: Mapper) {\r\n        this._http = http;\r\n        this._mapper = mapper;\r\n\r\n        http.configure(config => {\r\n            config\r\n                .withBaseUrl(environment.apiUrl);\r\n        });\r\n\r\n    }\r\n\r\n    createTodo(description: string, priority: Priority= Priority.Medium) {\r\n        let task = new Todo();\r\n        task.priority = priority;\r\n        task.description = description;\r\n\r\n        this._http.fetch('/tasks', {\r\n            method: 'post',\r\n            //mode: 'no-cors',\r\n            body: json(task)\r\n        })\r\n        .then(response => response.json())\r\n        .then(data=> {\r\n            log.debug(data);\r\n            return data;\r\n        })\r\n        .then(data => {\r\n            debugger;\r\n            \r\n            this.getTodoItems();\r\n            //var items = this._mapper.map('todoResources', 'todos', data);\r\n        });\r\n\r\n    }\r\n\r\n    getTodoItems(){\r\n        this._http.fetch('/tasks', {\r\n            //mode: 'no-cors',\r\n            method: 'get'\r\n            \r\n        })\r\n        .then(response => response.json())\r\n        .then(data=> {\r\n            log.debug(data);\r\n            return data;\r\n        })\r\n        .then(data => {\r\n            debugger;\r\n            var items = this._mapper.map('todoResources', 'todos', data);\r\n            this.setItems(items);\r\n        });\r\n    }\r\n\r\n\r\n    private setItems(items) {\r\n        this.todo.length = 0;\r\n        items.forEach(item => {\r\n            this.todo.push(item);\r\n        });\r\n    }\r\n\r\n\r\n}","import { singleton } from 'aurelia-framework';\r\nimport { Todo } from '../models/todo';\r\nimport 'automapper-ts';\r\n\r\n//import * as automapper from 'automapper-ts';\r\n\r\n@singleton()\r\nexport class Mapper {\r\n\r\n    constructor() \r\n    {\r\n        automapper.initialize((config) => {\r\n            config.addProfile(new MappingProfile());\r\n        });\r\n        new TodoSetup().setup(automapper);       \r\n    }\r\n\r\n    map(sourceType: string, targetType: string, source: any): any {\r\n        return automapper.map(sourceType, targetType, source);\r\n    }\r\n\r\n}\r\n\r\n\r\nclass TodoSetup  {\r\n    \r\n    setup(mapper) {\r\n\r\n        mapper.createMap('todoResource', 'todo')\r\n            .convertToType(Todo)\r\n            .withProfile('default');\r\n        \r\n        mapper.createMap('todo', 'todoResource')\r\n //           .forMember('destination', (opts: AutoMapperJs.IMemberConfigurationOptions) => { opts.mapFrom('destination'); })\r\n //           .forMember('isComplete', (opts: AutoMapperJs.IMemberConfigurationOptions) => { opts.mapFrom('isComplete'); })\r\n //           .forMember('created', (opts: AutoMapperJs.IMemberConfigurationOptions) => { opts.mapFrom('created'); })\r\n //           .forMember('priority', (opts: AutoMapperJs.IMemberConfigurationOptions) => { opts.mapFrom('priority'); })\r\n            ;\r\n\r\n        mapper.createMap('todoResources', 'todos')\r\n            .convertUsing(ctx => {\r\n                let src = <any[]>(ctx.sourceValue.data);\r\n                let dest = [];\r\n        \r\n                src.forEach(item=> {\r\n                    let destIem = automapper.map('todoResource', 'todo', src);\r\n                    dest.push(destIem);\r\n                });\r\n        \r\n                return dest;\r\n            });\r\n\r\n    }\r\n\r\n}\r\n\r\nclass TodoResourceCollection  {\r\n    public convert(ctx: any): any {\r\n\r\n        let src = <any[]>(ctx.sourceValue.data);\r\n        let dest = [];\r\n\r\n        src.forEach(item=> {\r\n            let destIem = automapper.map('todoResource', 'todo', src);\r\n            dest.push(destIem);\r\n        });\r\n\r\n        return dest;\r\n    }\r\n}\r\n\r\nclass MappingProfile  {\r\n    public sourceMemberNamingConvention = new CamelCaseNamingConvention();\r\n    public destinationMemberNamingConvention = new CamelCaseNamingConvention();\r\n\r\n    public profileName = 'default';\r\n\r\n    public configure(): void {\r\n        this.sourceMemberNamingConvention = new CamelCaseNamingConvention();\r\n        this.destinationMemberNamingConvention = new CamelCaseNamingConvention();\r\n    }\r\n}\r\n\r\nexport class CamelCaseNamingConvention  {\r\n    public splittingExpression = /(^[a-z]+(?=$|[A-Z]{1}[a-z0-9]+)|[A-Z]?[a-z0-9]+)/;\r\n    public separatorCharacter = '';\r\n\r\n    public transformPropertyName(sourcePropertyNameParts: string[]): string {\r\n        // Transform the splitted parts.\r\n        var result: string = '';\r\n\r\n        for (var index = 0, length = sourcePropertyNameParts.length; index < length; index++) {\r\n             if (index === 0) {\r\n                result += sourcePropertyNameParts[index].charAt(0).toLowerCase() +\r\n                        sourcePropertyNameParts[index].substr(1);\r\n            } else {\r\n            result += sourcePropertyNameParts[index].charAt(0).toUpperCase() +\r\n                      sourcePropertyNameParts[index].substr(1);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","import { bindable, bindingMode } from 'aurelia-framework';\r\n\r\nconst ENTER_KEY = 13;\r\nconst ESC_KEY = 27;\r\n\r\nexport class TodoItem {\r\n\r\n    completed: boolean;\r\n    @bindable description: string;\r\n\r\n    \r\n\r\n}",null,"\r\nclass Person {\r\n    name: string;\r\n    age: number;\r\n\r\n    $type: 'model.person';\r\n}\r\n\r\n\r\nclass test {\r\n\r\n    testm() {\r\n\r\n        let mapperFactor = new MapperFactor();\r\n        mapperFactor\r\n            .addSetup(new MapSetup())\r\n            .setConfiguration(cfg => {\r\n\r\n            });\r\n\r\n        let mapper = mapperFactor.createMapper();\r\n\r\n        var anonPerson = {\r\n            name: \"test\",\r\n            _type: \"personResource\"\r\n        }\r\n\r\n\r\n        let person = mapper.map(anonPerson, 'model.Person');\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nclass MapSetup implements Setup {\r\n    configure(builder: Builder) {\r\n\r\n        builder.addType('model.person', Person);\r\n        builder.addType('personResource');\r\n\r\n        builder.createMap('model.person', 'personResource')\r\n            .forMemberSimple('name', opts => opts.mapFrom('name'))\r\n            .forMemberSimple('age', opts => opts.using(() => 5))\r\n            .forMemberSimple('test', opt => opt.ignore())\r\n            .forMember('model.person', 'name', opt => opt.mapFrom(s => s.hello, 'hello'))\r\n            .forSource('meh', opt => opt.ignore());\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n//--------------------------------------------------------\r\n\r\n\r\nexport interface Mapper {\r\n    map(source: any, destinationType: string);\r\n    mapTo(source: any, destination: any);\r\n}\r\n\r\n\r\nexport class JsMapper implements Mapper {\r\n\r\n    private _config: Configuration;\r\n    private _maps: Dictionary<TypeMap> = new Dictionary<TypeMap>();\r\n    private _typeMetas: Dictionary<TypeMeta> = new Dictionary<TypeMeta>();\r\n\r\n    constructor(config: Configuration, maps: TypeMap[], typeMetas: TypeMeta[]) {\r\n\r\n        this._config = config;\r\n\r\n        maps.forEach(map => {\r\n\r\n            let key = map.source + '=>' + map.target;\r\n            this._maps.set(key, map);\r\n\r\n        });\r\n\r\n        typeMetas.forEach(meta => {\r\n            this._typeMetas.set(meta.name, meta);\r\n        });\r\n    }\r\n\r\n    map(source: any, destinationType: string): any {\r\n        return this.execute(source, null, destinationType);\r\n    }\r\n    mapTo(source: any, destination: any): any {\r\n        return this.execute(source, destination, null);\r\n    }\r\n\r\n    private execute(source: any, destination: any, destinationType: string) {\r\n\r\n        if (destination == null && destinationType == null) throw new Error('destination type and instance is null, supply one of them');\r\n        if (source == null) return null; //this is valid;\r\n\r\n\r\n        let destinationProvided = destination != null;\r\n\r\n        //confirm if we have a collection or an actual map\r\n        let srcIsAnArray = Array.isArray(source);\r\n        let destinationIsAnArray = (destinationProvided && Array.isArray(destination)) || destinationType.includes('[]');\r\n\r\n        if (srcIsAnArray && destinationIsAnArray) {\r\n            return this.mapArray(source, destination, destinationType);\r\n        }\r\n\r\n        //find types\r\n        let sourceTypeProperty = this._config.typeStrategy.getTypeProperty(source);\r\n        let sourceType = source[sourceTypeProperty];\r\n\r\n        if (destinationType == null) {\r\n            let destinationTypeProperty = this._config.typeStrategy.getTypeProperty(destination);\r\n            destinationType = destination[destinationTypeProperty];\r\n        }\r\n\r\n        //find maps\r\n        var key = sourceType + '=>' + destinationType;\r\n        let map = this._maps.get(key);\r\n\r\n\r\n        //ensure destination instance.\r\n        var destinationTypeMeta = this._typeMetas.get(destinationType);\r\n        var sourceTypeMeta = this._typeMetas.get(sourceType);\r\n        //TODO: null\r\n\r\n\r\n        let mapped = this.mapSingle(<MapSingle>{\r\n\r\n            typeMap: map,\r\n\r\n            source: source,\r\n            sourceType: sourceType,\r\n            sourceTypeMeta: sourceTypeMeta,\r\n\r\n            destination: destination,\r\n            destinationType: destinationType,\r\n            destinationTypeMeta: sourceTypeMeta,\r\n\r\n        });\r\n\r\n        return mapped; //which should be the same as destination if passed in\r\n    }\r\n\r\n    private mapArray(source: any, destination: any, destinationType: string) {\r\n\r\n        if (source == null) throw new Error('source is null');\r\n        if ((destination == null || destination.length == 0) && destinationType == null)\r\n            throw new Error('destination type and instance is null, supply one of them');\r\n\r\n        if (source.length == 0)\r\n            return [];\r\n\r\n        //find types\r\n        let sourceTypeProperty = this._config.typeStrategy.getTypeProperty(source[0]);\r\n        let sourceType = source[sourceTypeProperty];\r\n\r\n\r\n        if (destinationType == null) {\r\n            destinationType = this._config.typeStrategy.getTypeProperty(destination[0]);\r\n        }\r\n        else {\r\n            destinationType = destinationType.replace('[]', '');\r\n        }\r\n\r\n        //find maps\r\n        var key = sourceType + '=>' + destinationType;\r\n        let map = this._maps.get(key);\r\n\r\n        //get some info\r\n        var destinationTypeMeta = this._typeMetas.get(destinationType);\r\n        var sourceTypeMeta = this._typeMetas.get(sourceType);\r\n        //TODO: null\r\n\r\n        //new\r\n        if (destination == null)\r\n            destination = [];\r\n\r\n        let temp = new Dictionary<any>();\r\n\r\n        //map id's where possible.\r\n        destination.forEach(item => {\r\n            let id = item[destinationTypeMeta.id];\r\n            temp.set(id.toString(), item);\r\n        });\r\n\r\n        //empty the items for now.\r\n        destination.length = 0;\r\n\r\n        source.forEach(srcItem => {\r\n\r\n            let id = srcItem[sourceTypeMeta.id];\r\n            let dest = temp.get(id);\r\n\r\n            let mapped = this.mapSingle(<MapSingle>{\r\n\r\n                typeMap: map,\r\n\r\n                source: srcItem,\r\n                sourceType: sourceType,\r\n                sourceTypeMeta: sourceTypeMeta,\r\n\r\n                destination: dest,\r\n                destinationType: destinationType,\r\n                destinationTypeMeta: sourceTypeMeta,\r\n\r\n            });\r\n\r\n            destination.push(mapped);\r\n\r\n        });\r\n\r\n        return destination;\r\n    }\r\n\r\n\r\n    private mapSingle(ctx: MapSingle): any {\r\n\r\n        let src = ctx.source;\r\n        let dest = ctx.destination;\r\n\r\n        if (dest == null) {\r\n            dest = ctx.destinationTypeMeta.ctor.createInstance();\r\n        }\r\n\r\n        let sourcePropeties = ctx.sourceTypeMeta.properties;\r\n        let destPropeties = ctx.destinationTypeMeta.properties;\r\n        let propMaps = ctx.typeMap.propertyMaps;\r\n\r\n\r\n        //figure out if we need to setup some automated mappings.\r\n\r\n        //the first 2 are to see if we know all that there is needed about the destination types\r\n        //as they will DRIVE the mapping in most cases\r\n\r\n        //anon type\r\n        let anonNotSetup =\r\n            destPropeties.keys.length == 0  //no properties, indicates missing setup.\r\n        //    && ctx.destinationTypeMeta.isAnon //is annon, as for known we would know the number of properties.\r\n            && ctx.typeMap.sourcePropertyMaps.length != sourcePropeties.keys.length; //if we had ignored source props it may account for the lack of known properties in this case\r\n\r\n\r\n        //crap we acutally do not know much information about known\r\n        //as typescript does not create the properties unless they are assign.\r\n        //known type\r\n        //let typeNotSetup =\r\n        //    !ctx.destinationTypeMeta.isAnon\r\n        //    && ctx.destinationTypeMeta.allPropertiesKnown; //for known types we set a field.\r\n\r\n        //now we see if mappngs have beed setup for this\r\n        //there should be mappings for each destination property        \r\n        let possibleMissingMaps = destPropeties.keys.length != propMaps.length;\r\n\r\n\r\n        //find all the properties\r\n        //well as much as we can for an Anon type.\r\n        if ((anonNotSetup)) { // || typeNotSetup)) {\r\n            //let properties;\r\n            //if(ctx.destinationTypeMeta.isAnon) {\r\n                let newValues = this._config.anonPropertyScanner.listProperties(\r\n                    ctx.destinationTypeMeta, \r\n                    ctx.typeMap,\r\n                    ctx.sourceTypeMeta);\r\n\r\n                newValues.forEach(property => {\r\n                    ctx.destinationTypeMeta.addProperty(property);\r\n                });\r\n            //}\r\n            //else {\r\n            //    this._config.propertyScanner.listProperties()\r\n            //}\r\n        }\r\n\r\n        if(possibleMissingMaps) {\r\n\r\n            let tempMaps = new Dictionary<PropertyMap>();\r\n            ctx.typeMap.propertyMaps.forEach(map => {\r\n                tempMaps.set(map.destinationName, map);\r\n            });\r\n\r\n            \r\n\r\n            ctx.destinationTypeMeta.properties.keys.forEach(property => {\r\n                if(tempMaps.get(property)!= null) return;\r\n             \r\n                let propertyMap = new PropertyMap();\r\n                let src = ctx.sourceTypeMeta.properties.get(property);\r\n                if(src == null) {\r\n                    propertyMap.ignoreDestination = true; \r\n                }\r\n                else{\r\n                    \r\n                    propertyMap.sourceName = property;\r\n                    propertyMap.sourceGetter = (instance) => instance[src];\r\n                }\r\n        \r\n                ctx.typeMap.propertyMaps.push(propertyMap);\r\n            \r\n            });\r\n\r\n        }\r\n\r\n        //map each property.\r\n        ctx.typeMap.propertyMaps.forEach(map => {\r\n            \r\n            //IM here Dave\r\n\r\n            let src = map.sourceGetter(ctx.source);\r\n            if(src == null) continue;\r\n\r\n            if(map.sourceType == null) {\r\n\r\n                let sType = typeof ctx.source;\r\n                let isObject = sType === 'object'\r\n                let isArray = Array.isArray(src);\r\n\r\n                if(isArray) {\r\n                    map.destinationType = \r\n                }\r\n                \r\n            }\r\n\r\n\r\n\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\ninterface MappingCollection {\r\n    source: any;\r\n    destination: any;\r\n}\r\n\r\ninterface MapSingle {\r\n\r\n    typeMap: TypeMap;\r\n\r\n    source: any;\r\n    sourceType: string;\r\n    sourceTypeMeta: TypeMeta;\r\n\r\n    destination: any;\r\n    destinationType: string;\r\n    destinationTypeMeta: TypeMeta;\r\n\r\n}\r\n\r\nexport class MapperFactor {\r\n\r\n    private _builder: Builder = new Builder();\r\n    private _config: Configuration = new Configuration();\r\n\r\n    addSetup(setup: Setup) {\r\n        setup.configure(this._builder);\r\n        return this;\r\n    }\r\n\r\n    setConfiguration(setupConfig: (config: Configuration) => void) {\r\n        setupConfig(this._config);\r\n    }\r\n\r\n\r\n    createMapper(): Mapper {\r\n        return new JsMapper(this._config, this._builder.mappings, this._builder.typeMetas);\r\n    }\r\n}\r\n\r\nexport class Configuration {\r\n\r\n    idStrategy: IdStrategy = new DefaultIdStrategy();\r\n    typeStrategy: TypeStrategy = new DefaultTypeStrategy();\r\n    anonPropertyScanner: AnonPropertyScanner = new DefaultAnonPropertyScanner();\r\n    propertyScanner: PropertyScanner = new DefaultPropertyScanner();\r\n\r\n}\r\n\r\n\r\nexport class Builder {\r\n\r\n    mappings: TypeMap[] = [];\r\n    typeMetas: TypeMeta[] = [];\r\n\r\n    createMap<TSrc, TDest>(sourceType: string, destinationType: string): FluentClassMapping<TSrc, TDest> {\r\n        let classMap = new TypeMap(sourceType, destinationType);\r\n        let config = new FluentClassMapping(classMap);\r\n        this.mappings.push(classMap);\r\n        return config;\r\n    };\r\n\r\n    addType(typeName: string, type: Function = null) {\r\n        let meta = new TypeMeta(typeName);\r\n\r\n        if (type != null) {\r\n            meta.setType(type);\r\n        }\r\n\r\n        this.typeMetas.push(meta);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class FluentClassMapping<TSrc, TDest> {\r\n\r\n    private _classMapping: TypeMap;\r\n\r\n    constructor(mapping: TypeMap) {\r\n        this._classMapping = mapping;\r\n        this._classMapping\r\n    }\r\n\r\n    /**\r\n     * provide explict mapping instunction for a simple propty ie value type or string.\r\n     * @param destinationProperty the name of the property\r\n     * @param opts mapping instuctions.\r\n     */\r\n    forMemberSimple(destinationProperty: string, opts: MapFromOpts<TSrc>): FluentClassMapping<TSrc, TDest> {\r\n        let result = this.forMember(null, destinationProperty, opts);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * provide explicit mapping instuctions for a destination member (how is is maped from source)\r\n     * @param destinationType the property's type (please tell us, as there is no reflection)\r\n     * @param destinationProperty the name of the property\r\n     * @param opts the mapping options to apply\r\n     */\r\n    forMember(destinationType: string|PropertyType, destinationProperty: string, opts: MapFromOpts<TSrc>): FluentClassMapping<TSrc, TDest> {\r\n        let propertyMap = new PropertyMap();\r\n\r\n        propertyMap.destinationName = destinationProperty;\r\n\r\n        if(typeof destinationType === 'string') {\r\n            let dt = <string>destinationType;\r\n            if(dt.endsWith('[]')){\r\n                propertyMap.destinationType = PropertyType.array;\r\n                propertyMap.destinationTypeName = dt.replace('[]','');\r\n            }\r\n            else {\r\n                propertyMap.destinationTypeName = dt;\r\n                propertyMap.destinationType = PropertyType.object;\r\n            }\r\n        }\r\n        else {\r\n            propertyMap.destinationType = PropertyType.value;\r\n            propertyMap.destinationTypeName = 'valueType';\r\n        }\r\n        \r\n\r\n        propertyMap.destinationSetter = (instance, value) => {\r\n            instance[destinationProperty] = value;\r\n        };\r\n\r\n        let options = new MapFromOptions(propertyMap);\r\n        opts(options);\r\n        this._classMapping.propertyMaps.push(propertyMap);\r\n        return this;\r\n    }\r\n\r\n    forSource(member: string, opts: MapFromOpts<TSrc>): FluentClassMapping<TSrc, TDest> {\r\n        let propertyMap = new PropertyMap();\r\n        let options = new MapFromOptions(propertyMap);\r\n        opts(options);\r\n        this._classMapping.sourcePropertyMaps.push(propertyMap);\r\n        return this;\r\n    }\r\n\r\n    /*\r\n    convertToClass(type: Function) {\r\n        this._classMapping.ctorStrategy = new TypeCtor(type);\r\n        return this;\r\n    }\r\n    */\r\n\r\n}\r\n\r\n/**\r\n * store information about the mapping\r\n */\r\nclass TypeMap {\r\n\r\n    target: string; //the type name\r\n    source: string;\r\n    propertyMaps: PropertyMap[] = [];\r\n    sourcePropertyMaps: PropertyMap[] = [];\r\n    \r\n\r\n    constructor(source: string, target: string) {\r\n        this.source = source;\r\n        this.target = target;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * each class map should have seval property maps\r\n */\r\nclass PropertyMap {\r\n\r\n    isCreatedByMapper: boolean = false; //if this was created by this mapper\r\n\r\n    sourceType: PropertyType;\r\n    sourceTypeName: string;\r\n    sourceName: string;\r\n    sourceGetter: (instance: any) => any;\r\n    ignoreSource: boolean = false;\r\n\r\n    destinationType: PropertyType;\r\n    destinationTypeName: string\r\n    destinationName: string;\r\n    destinationSetter: (instance: any, value: any) => void;\r\n    ignoreDestination: boolean = false;\r\n\r\n}\r\n\r\nenum PropertyType {\r\n    value,\r\n    object,\r\n    array\r\n}\r\n\r\n\r\nexport interface MapFromOpts<TSrc> {\r\n    (opt: MapFromOptions<TSrc>): void;\r\n}\r\n\r\nexport interface MapSourceOpts<TSrc, TDest> {\r\n    (opt: MapSourceOptions<TSrc>): void;\r\n}\r\n\r\nexport class MapFromOptions<TSrc> {\r\n\r\n    private _propertyMap: PropertyMap;\r\n\r\n    constructor(propertyMap: PropertyMap) {\r\n        this._propertyMap = propertyMap;\r\n    }\r\n\r\n    /**\r\n     * mapping options\r\n     * @param source the source where we can source the value from.\r\n     * @param sourceName the name of the source, this is only need if you passed a delegae in for the source and we a mappping to an Anon type.\r\n     */\r\n    mapFrom(source: string | ((srcInstnace: TSrc | any) => any), sourceName: string = null) {\r\n\r\n        if (typeof source === 'string') {\r\n            this._propertyMap.sourceGetter = (instance: any) => {\r\n                return instance[source];\r\n            }\r\n            this._propertyMap.sourceName = source;\r\n        }\r\n        else {\r\n            this._propertyMap.sourceGetter = source;\r\n            this._propertyMap.sourceName = sourceName;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * a function which will provide the value.\r\n     * @param func a func which will result in a value you want.\r\n     */\r\n    using(func: () => any): void {\r\n        this._propertyMap.sourceGetter = (instance: any) => {\r\n            return func();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * this map will IGNORE this destinaiton value\r\n     */\r\n    ignore() {\r\n        this._propertyMap.ignoreDestination = true;\r\n    }\r\n}\r\n\r\n\r\nexport class MapSourceOptions<TSrc> {\r\n\r\n    private _propertyMap: PropertyMap;\r\n\r\n    constructor(propertyMap: PropertyMap) {\r\n        this._propertyMap = propertyMap;\r\n    }\r\n\r\n\r\n    /**\r\n     * this source value will be ignored\r\n     */\r\n    ignore() {\r\n        this._propertyMap.ignoreSource = true;\r\n    }\r\n}\r\n\r\n\r\ninterface Setup {\r\n    configure(builder: Builder): void;\r\n}\r\n\r\n\r\nexport interface CtorStrategy {\r\n    createInstance(): any;\r\n}\r\n\r\nclass AnonCtor implements CtorStrategy {\r\n    createInstance(): any {\r\n        return {};\r\n    }\r\n}\r\n\r\nclass TypeCtor implements CtorStrategy {\r\n    _ctor: Function;\r\n\r\n    constructor(ctor: Function) {\r\n        this._ctor = ctor;\r\n    }\r\n\r\n    createInstance(): any {\r\n        return this._ctor();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//engine\r\nexport interface TypeStrategy {\r\n    getTypeProperty(instance: any): string;\r\n}\r\n\r\nclass DefaultTypeStrategy implements TypeStrategy {\r\n    getTypeProperty(instance: any): string {\r\n        let typeName = null;\r\n        typeName = instance['$type'];\r\n        if (typeName != null) return typeName;\r\n\r\n        typeName = instance['_type'];\r\n        if (typeName != null) return typeName;\r\n\r\n    }\r\n}\r\n\r\n\r\ninterface NamingConvention {\r\n    convertToTarget(name: string): string;\r\n    convertToCommon(name: string): string;\r\n}\r\n\r\n\r\n\r\n\r\nclass CamelCaseNamingConvention implements NamingConvention {\r\n    \r\n    convertToTarget(name: string): string {\r\n        return this.camelize(name);\r\n    }\r\n    \r\n    convertToCommon(name: string): string {\r\n        return this.camelize(name);\r\n    }\r\n\r\n    camelize(str) {\r\n        return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\r\n            return index == 0 ? letter.toLowerCase() : letter.toUpperCase();\r\n        });//.replace(/\\s+/g, '');\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ninterface PropertyScanner {\r\n    listProperties(instance: any): string[];\r\n}\r\n\r\nclass DefaultPropertyScanner implements PropertyScanner {\r\n\r\n    listProperties(instance: any): string[] {\r\n        let properties = Object.keys(instance);\r\n        let result = [];\r\n        properties.forEach(property => {\r\n            //not interested in functions\r\n            if (typeof property === \"function\") return;\r\n\r\n            if (property.indexOf('_') === 0) return;\r\n            if (property.indexOf('$') === 0) return;\r\n\r\n            result.push(property);\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * this is used to figure our what properies the anon\r\n * destination object should have.\r\n */\r\ninterface AnonPropertyScanner {\r\n    listProperties(destionationMeta: TypeMeta, typeMap: TypeMap, sourceTypeMeta: TypeMeta): string[];\r\n}\r\n\r\n\r\nclass DefaultAnonPropertyScanner implements AnonPropertyScanner {\r\n\r\n    listProperties(destionationTypeMeta: TypeMeta, typeMap: TypeMap, sourceTypeMeta: TypeMeta): string[] {\r\n\r\n        let result = [];\r\n\r\n        let known = new Dictionary<string>();\r\n        destionationTypeMeta.properties.keys.forEach(knownItem => {\r\n            known.set(knownItem, knownItem);\r\n        });\r\n\r\n        let source = new Dictionary<string>();\r\n        sourceTypeMeta.properties.keys.forEach(sourceItem => {\r\n            source.set(sourceItem, sourceItem);\r\n        });\r\n\r\n\r\n        let destinationMapped = new Dictionary<PropertyMap>();\r\n        typeMap.propertyMaps.forEach(map => {\r\n\r\n            let key = map.destinationName;\r\n            if (!map.ignoreDestination && known.get(key) == null) {\r\n                //found a new property \r\n                result.push(known.get(key));\r\n                source.remove(map.sourceName);\r\n            }\r\n        });\r\n\r\n        typeMap.sourcePropertyMaps.forEach(map => {\r\n            let key = map.sourceName;\r\n            if (map.ignoreSource && source.get(key) != null)\r\n                source.remove(key);\r\n        });\r\n\r\n        //anything left will need to be mapped over.\r\n        source.keys.forEach(item => {\r\n            result.push(source.get(item));\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninterface IdStrategy {\r\n    getIdProperty(typeName: string, instance: any, properties: string[]): string;\r\n}\r\n\r\nclass DefaultIdStrategy {\r\n    getIdProperty(typeName: string, instance: any, properties: string[]) {\r\n        let parts = typeName.split('.') // 'hello.Person';\r\n        let tName = parts[parts.length - 1].toLowerCase(); //person\r\n\r\n        let idName = null;\r\n        properties.forEach(property => {\r\n            let p = property.toLowerCase();\r\n\r\n            if (idName != null) return;\r\n\r\n            if (p == 'id') {\r\n                idName = property;\r\n                return;\r\n            }\r\n\r\n            if (p.startsWith(tName) && p.endsWith('id')) {\r\n                idName = property;\r\n                return;\r\n            }\r\n\r\n        });\r\n\r\n        return idName;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * information about each type/class\r\n */\r\nclass TypeMeta {\r\n\r\n    constructor(typeName: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    name: string;\r\n    id: string; //property name, not the instance value.\r\n\r\n    properties: Dictionary<string> = new Dictionary<string>();\r\n    allPropertiesKnown: boolean = false; //assume a declared type will have a fixed number of properties.\r\n\r\n\r\n    namingConvention: NamingConvention = new CamelCaseNamingConvention();\r\n\r\n    isAnon: boolean = false;\r\n    ctor: CtorStrategy = new AnonCtor();\r\n    actualType: Function;\r\n\r\n    setType(type: Function) {\r\n        this.isAnon = false;\r\n        this.ctor = new TypeCtor(type);\r\n        this.actualType = type;\r\n    }\r\n\r\n    addProperty(name: string) {\r\n        let value = this.namingConvention.convertToTarget(name);\r\n        this.properties.set(name, value);\r\n    }\r\n}\r\n\r\n\r\n//misk\r\nclass Dictionary<TValue> {\r\n    state = {};\r\n\r\n    get keys(): Array<string> {\r\n        return Object.keys(this.state);\r\n    }\r\n\r\n    set(key: string, value: TValue): void {\r\n        this.state[key] = value;\r\n    }\r\n\r\n    get(key: string): TValue {\r\n        let ret = this.state[key];\r\n        return <TValue>ret;\r\n    }\r\n\r\n    remove(key: string): void {\r\n        delete this.state[key];\r\n    }\r\n}\r\n"],"sourceRoot":".."}